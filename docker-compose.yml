version: "3.3"

volumes:
  kong_data: {}

networks:
  kong-net:

services:
#  kong:
#    build:
#      context: ./
#    networks:
#      - kong-net
#    depends_on:
#      - kong-database
#    volumes:
#      - ./kong-declarative-config.yml:/tmp/kong-declarative-config.yml
#      - ./kong/plugins/luizalabs-kafka:/usr/local/lib/luarocks/rocks-5.1/kong-plugin-luizalabs-kafka/1.0.0-0/lua/kong/plugins/luizalabs-kafka
#      - ./kong/plugins/luizalabs-kafka:/usr/local/share/lua/5.1/kong/plugins/luizalabs-kafka
#    environment:
#      KONG_DATABASE: postgres
#      KONG_PG_HOST: kong-database
#      KONG_PG_DATABASE: kong
#      KONG_PG_USER: kong
#      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD:-kong}
#      KONG_PROXY_LISTEN: 0.0.0.0:8000
#      KONG_PROXY_LISTEN_SSL: 0.0.0.0:8443
#      KONG_ADMIN_LISTEN: 0.0.0.0:8001
#      KONG_PROXY_ACCESS_LOG: /dev/stdout
#      KONG_PROXY_ERROR_LOG: /dev/stderr
#      KONG_ADMIN_ACCESS_LOG: /dev/stdout
#      KONG_ADMIN_ERROR_LOG: /dev/stderr
#      KONG_PLUGINS: bundled,luizalabs-kafka
#    ports:
#      - "8000:8000"
#      - "8001:8001"
#      - "8443:8443"
#      - "8444:8444"
#    healthcheck:
#      test: [ "CMD", "kong", "health" ]
#      interval: 10s
#      timeout: 10s
#      retries: 10
  zookeeper:
    image: 'bitnami/zookeeper:latest'
    ports:
      - '2181:2181'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
  kafka:
    image: 'bitnami/kafka:latest'
    ports:
      - '9092:9092'
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://127.0.0.1:9092
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper
#  kong-database:
#    image: postgres:9.6
#    restart: on-failure
#    networks:
#      - kong-net
#    volumes:
#      - kong_data:/var/lib/postgresql/data
#    environment:
#      POSTGRES_USER: kong
#      POSTGRES_PASSWORD: ${KONG_PG_PASSWORD:-kong}
#      POSTGRES_DB: kong
#    ports:
#      - "5432:5432"
#    healthcheck:
#      test: [ "CMD", "pg_isready", "-U", "kong" ]
#      interval: 30s
#      timeout: 30s
#      retries: 3
#
#  kong-migration:
#    image: ${KONG_DOCKER_TAG:-kong:latest}
#    command: kong migrations bootstrap
#    networks:
#      - kong-net
#    restart: on-failure
#    environment:
#      KONG_DATABASE: postgres
#      KONG_PG_HOST: kong-database
#      KONG_PG_DATABASE: kong
#      KONG_PG_USER: kong
#      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD:-kong}
#    depends_on:
#      - kong-database

  # zipkin:
  #   image: openzipkin/zipkin:2
  #   networks:
  #     - kong-net
  #   ports:
  #     - "9411:9411"
  #   restart: on-failure
  # keycloak:
  #   image: jboss/keycloak:4.8.3.Final
  #   ports:
  #     - 8080:8080
  #   volumes:
  #     - ./conf:/opt/jboss/keycloak/imports
  #   command:
  #     - "-b 0.0.0.0 -Dkeycloak.import=/opt/jboss/keycloak/imports/realm-export.json"
  #   environment:
  #     KEYCLOAK_USER: admin
  #     KEYCLOAK_PASSWORD: password
   #######################################
   # Konga database prepare
   #######################################
#  konga-prepare:
#    image: pantsel/konga:latest
#    command: "-c prepare -a postgres -u postgresql://kong:${KONG_PG_PASSWORD:-kong}@kong-database:5432/konga"
#    networks:
#      - kong-net
#    restart: on-failure
#    depends_on:
#      - kong-database
#
#   #######################################
#   # Konga: Kong GUI
#   #######################################
#  konga:
#    image: pantsel/konga:latest
#    restart: always
#    networks:
#        - kong-net
#    environment:
#      DB_ADAPTER: postgres
#      DB_URI: postgresql://kong:${KONG_PG_PASSWORD:-kong}@kong-database:5432/konga
#      NODE_ENV: production
#    depends_on:
#      - kong-database
#    ports:
#      - "1337:1337"

